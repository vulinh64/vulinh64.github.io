/* Using Docusaurus/Infima variables for consistency */
.pageContainer {
    margin: 0 auto; /* Center the container */
    width: 50%; /* Ensure it takes full width within max-width */
    padding: 1em; /* Consistent padding */
    display: flex; /* Use flexbox to control child alignment */
    flex-direction: column; /* Stack children vertically */
    align-items: center; /* Center children horizontally */
}

@media (max-width: 768px) {
    .pageContainer {
        width: 100%;
        max-width: 100%;
    }
}

/* Center the title explicitly */
.textCenter {
    text-align: center; /* Ensure text is centered */
    width: 100%; /* Full width to align with container */
    margin: 0; /* Remove default margins */
    padding: var(--ifm-spacing-vertical, 1em) 0; /* Consistent vertical padding */
}

/* Styling fieldsets to match Infima's card-like appearance with consistent width */
.cronPart {
    display: flex;
    flex-direction: column;
    align-items: center;
    box-sizing: border-box;
    border-radius: 1em;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    width: 100%; /* Consistent width for all cron parts */
    margin: 0 auto var(--ifm-spacing-vertical, 1em) auto; /* Centered with bottom margin */
}

/* Legend styling with left alignment */
.cronPart legend {
    text-align: left;
}

/* Flex container for option select */
.optionContainer {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--ifm-spacing-horizontal, 1em);
    margin-bottom: var(--ifm-spacing-vertical, 1em);
    width: 100%;
}

/* Select styling with Infima form styles */
.optionSelect {
    flex: 1;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    padding: 0.5em;
    border-radius: 0.5em;
    font-size: 100%;
}

/* Sub-fieldset for nested inputs */
.subFieldset {
    display: flex;
    flex-direction: column;
    align-items: center;
    box-sizing: border-box;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    padding: 0.5em;
    border-radius: 0.5em;
    width: 100%; /* Ensure sub-fieldsets take full width of parent */
    font-size: 100%;
}

/* Legend for sub-fieldsets with left alignment */
.subFieldset legend {
    text-align: left;
}

/* Flex container for 'between' fieldsets */
.betweenContainer {
    display: flex;
    justify-content: center;
    align-items: flex-start; /* Align items to the top */
    gap: var(--ifm-spacing-horizontal, 1em); /* Add gap between From and To */
    width: 100%; /* Ensure full width */
    flex-wrap: nowrap; /* Keep items in single line on desktop */
}

/* Mobile adjustments for between container */
@media (max-width: 768px) {
    .betweenContainer {
        flex-direction: column;
        flex-wrap: wrap;
        gap: var(--ifm-spacing-vertical, 0.5em); /* Vertical gap on mobile */
    }
}

/* Update sub-fieldsets within between container for better sizing */
.betweenContainer .subFieldset {
    flex: 1; /* Each fieldset takes equal space */
    min-width: 0; /* Allow shrinking */
}

/* Mobile: full width for sub-fieldsets in between container */
@media (max-width: 768px) {
    .betweenContainer .subFieldset {
        flex: none; /* Reset flex on mobile */
        width: 100%; /* Full width on mobile */
    }
}

/* Container for inputs and dropdowns */
.inputContainer {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    border-radius: 0.5em;
}

/* Number input styling */
.numberInput {
    border-radius: 0.5em;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    padding: 0.5em;
    font-size: 100%;
    text-align: center;
    width: 100%; /* Full width within container */
}

/* Input group for ranges */
.inputGroup {
    border-radius: 0.5em;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    padding: 0.5em;
    font-size: 100%;
    text-align: center;
    width: 100%; /* Full width within container */
}

/* Text input for comma-separated values */
.textInput {
    flex: 1;
    border-radius: 0.5em;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    padding: 0.5em;
    font-size: 100%;
    text-align: center;
    width: 100%; /* Full width within container */
}

/* Dropdown styling for 'between' option */
.dropdown {
    border-radius: 0.5em;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    padding: 0.5em;
    width: 100%; /* Full width for dropdowns */
}

/* Checkbox container for months/weekdays */
.checkboxContainer {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    width: 100%;
}

/* Mobile adjustments for checkbox container */
@media (max-width: 768px) {
    .checkboxContainer {
        justify-content: flex-start;
    }
}

/* Checkbox label styling */
.checkboxLabel {
    display: flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
}

/* Dropdown container for nth occurrence */
.dropdownContainer {
    display: flex;
    justify-content: center;
    gap: var(--ifm-spacing-horizontal, 1em);
    width: 100%;
    flex-wrap: nowrap; /* Single line on desktop */
}

/* Dropdown unit styling for nth occurrence (label + dropdown pair) */
.dropdownUnit {
    display: flex;
    flex-direction: column;
    flex: 1; /* Equal width for each dropdown unit */
    align-items: stretch;
    font-size: 100%;
}

/* Ensure dropdowns within units are full width */
.dropdownUnit .dropdown {
    width: 100%;
}

/* Label styling for dropdown units */
.dropdownUnit label {
    margin-bottom: 0.5em;
    text-align: left;
}

/* Mobile adjustments for dropdown container */
@media (max-width: 768px) {
    .dropdownContainer {
        flex-direction: column;
        gap: var(--ifm-spacing-vertical, 0.5em);
    }
}

/* Result container styling */
.resultContainer {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    margin: 0 auto var(--ifm-spacing-vertical, 1em) auto; /* Center with bottom margin */
    box-sizing: border-box;
    border-radius: 1em;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
}

.resultContainer legend {
    text-align: left;
}

/* Container for code block and copy button */
.codeBlockContainer {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    width: 100%;
}

/* Result code block styling */
.resultCode {
    overflow-y: auto;
    white-space: pre-wrap;
    word-break: break-all;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    box-sizing: border-box;
    flex: 1;
}

/* Code content styling */
.resultCode code {
    font-size: 1.5em; /* Slightly reduced for mobile compatibility */
    text-align: center;
}

/* Mobile adjustments for code */
@media (max-width: 768px) {
    .resultCode code {
        font-size: 1.5em;
        word-break: break-all;
    }
}

/* Copy button styling */
.copyButton {
    display: none;
    position: absolute;
    right: 1em;
    background-color: transparent;
    border: var(--border-very-thin) solid var(--ifm-color-primary);
    cursor: pointer;
    z-index: 1;
    padding: 0.5em;
    border-radius: 1em;
    background-image: url('/svg/copy.svg');
    background-position: center;
    background-repeat: no-repeat;
    transition: background-color 0.5s ease, background-image 0.5s ease;
    width: 4em;
    height: 4em;
}

/* Copied state for copy button */
.copyButton.copied {
    background-color: var(--ifm-color-primary);
    background-image: url('/svg/copied.svg');
}

/* Active state for copy button */
.copyButton:active {
    background-color: var(--ifm-color-primary);
}

/* Show copy button on hover or always on mobile */
.resultCode:hover .copyButton {
    display: block;
}

@media (max-width: 768px) {
    .copyButton {
        display: block;
    }
}

/* Chips container styling */
.chipsContainer {
    display: flex;
    flex-direction: column;
    width: 100%;
    position: relative;
}

/* Chips styling */
.chips {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    border-radius: 0.5em;
    padding: 0.5em;
    min-height: 2.5em;
}

/* Individual chip styling */
.chip {
    display: inline-flex;
    align-items: center;
    border-radius: 1em;
    padding: 0.3em 0.6em;
    margin: 0.2em;
    font-size: 0.9em;
    background-color: transparent;
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
}

.chip:hover {
    background-color: var(--ifm-color-primary-darkest);
    cursor: pointer;
}

/* Chip remove button styling */
.chipRemove {
    cursor: pointer;
    margin-left: 0.5em;
    color: var(--ifm-color-content);
    font-weight: bold;
}

.chipRemove:hover {
    color: var(--ifm-color-danger);
}

/* Chip input styling */
.chipInput {
    border: none;
    outline: none;
    flex-grow: 1;
    padding: 0.5em;
    font-size: 100%;
    border-radius: 0.5em;
}

/* Suggestions dropdown styling */
.suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    background: var(--ifm-background-color);
    border: var(--border-very-thin) solid var(--ifm-toc-border-color);
    border-radius: 0.5em;
    overflow-y: auto;
    width: 100%;
    z-index: 10;
}

/* Individual suggestion item styling */
.suggestionItem {
    padding: 0.5em;
    cursor: pointer;
}

.suggestionItem:hover {
    background-color: var(--ifm-menu-color-background-active);
}

/* Ensure inputs and selects inherit Infima focus styles */
.numberInput:focus,
.textInput:focus,
.optionSelect:focus,
.dropdown:focus,
.copyButton:focus,
.chipInput:focus {
    outline: none;
    border-color: var(--ifm-color-primary);
}